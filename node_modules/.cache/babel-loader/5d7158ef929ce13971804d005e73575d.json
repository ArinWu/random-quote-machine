{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sushi\\\\Documents\\\\Dev\\\\JavascritTest\\\\randomquote\\\\src\\\\App.js\";\nimport React, { Component } from 'react'; // import logo from './logo.svg';\n// import './App.css';\n\nimport 'typeface-roboto';\nimport QuoteMachine from './components/QuoteMachine';\nimport { random } from 'lodash';\nimport { Grid, withStyles } from '@material-ui/core'; // import Box from '@material-ui/core/Box';\n\nimport { data, colors } from './components/store';\nconst style = {\n  container: {\n    type: 'dark',\n    alignItems: 'center',\n    display: 'flex',\n    height: '100vh'\n  },\n  Grid: {\n    height: '140'\n  }\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      //if failed show 默认数据\n      quotes: [{\n        \"quote\": \"get faild\",\n        \"author\": \"吴书琪\"\n      }],\n      //通过index来选择数据\n      selectedIndex: null\n    };\n    this.assignIndex = this.assignIndex.bind(this);\n    this.setSelectedIndex = this.setSelectedIndex.bind(this);\n  }\n\n  nextClickHandler() {\n    console.log(\"success\");\n  } //可以使用localstoreage其实\n\n\n  componentDidMount() {\n    localStorage.setItem('example_project', 'Randowm Quote Machine');\n    fetch(\"https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json\").then(d => d.json()).then(quotes => this.setState({\n      quotes\n    }, this.assignIndex)).catch(function (error) {\n      fetch('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json').then(d => d.json()).then(quotes => this.setState({\n        quotes\n      }, this.assignIndex)).then(function (error) {\n        this.setState(data, this.assignIndex);\n      });\n    });\n  } //返回如果有返回这条数据，并更新state\n  //每一次会返回不同的数值\n  //get是有数据才返回\n\n\n  get selectedQuote() {\n    if (!this.state.quotes.length && !Number.isInteger(this.state.selectedIndex)) {\n      return;\n    }\n\n    return this.state.quotes[this.state.selectedIndex];\n  } // Pick a index for get quotes\n  //产生index\n\n\n  setSelectedIndex() {\n    if (!this.state.quotes.length) {\n      return;\n    }\n\n    return random(0, this.state.quotes.length - 1);\n  } //更新index\n\n\n  assignIndex() {\n    this.setState({\n      selectedIndex: this.setSelectedIndex()\n    });\n  }\n\n  render() {\n    return React.createElement(Grid, {\n      className: this.props.classes.container + ' ' + this.props.classes.Grid,\n      id: \"quote-box\",\n      justify: \"center\",\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      lg: 6,\n      className: this.props.classes.Grid,\n      fixed: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(QuoteMachine, {\n      assignIndex: this.assignIndex,\n      selectedQuote: this.selectedQuote,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default withStyles(style)(App);","map":{"version":3,"sources":["C:/Users/Sushi/Documents/Dev/JavascritTest/randomquote/src/App.js"],"names":["React","Component","QuoteMachine","random","Grid","withStyles","data","colors","style","container","type","alignItems","display","height","App","constructor","props","state","quotes","selectedIndex","assignIndex","bind","setSelectedIndex","nextClickHandler","console","log","componentDidMount","localStorage","setItem","fetch","then","d","json","setState","catch","error","selectedQuote","length","Number","isInteger","render","classes"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import logo from './logo.svg';\n// import './App.css';\nimport 'typeface-roboto';\nimport QuoteMachine from './components/QuoteMachine';\nimport { random } from 'lodash';\nimport { Grid ,withStyles} from '@material-ui/core'\n// import Box from '@material-ui/core/Box';\n\nimport {data, colors} from './components/store'\n\nconst style = {\n  container: {\n    type: 'dark',\n    alignItems: 'center',\n    display: 'flex',\n    height: '100vh'\n  },\n  Grid: {\n    height: '140'\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      //if failed show 默认数据\n      quotes: [\n        {\n          \"quote\": \"get faild\",\n          \"author\": \"吴书琪\"\n        }\n      ],\n      //通过index来选择数据\n      selectedIndex: null\n    }\n    this.assignIndex = this.assignIndex.bind(this)\n    this.setSelectedIndex = this.setSelectedIndex.bind(this)\n  }\n\n  nextClickHandler() {\n    console.log(\"success\");\n  }\n\n  //可以使用localstoreage其实\n  componentDidMount() {\n    localStorage.setItem('example_project', 'Randowm Quote Machine');\n  \n    fetch(\"https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json\")\n\n      .then(d => d.json())\n      .then(quotes => this.setState({ quotes }, this.assignIndex))\n      .catch(function (error) {\n        fetch('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json')\n        .then(d => d.json())\n        .then(quotes => this.setState({ quotes }, this.assignIndex))\n        .then(function(error) {\n          this.setState(data, this.assignIndex)\n        })\n      })\n  }\n\n  //返回如果有返回这条数据，并更新state\n  //每一次会返回不同的数值\n  //get是有数据才返回\n  get selectedQuote() {\n    if (!this.state.quotes.length && !Number.isInteger(this.state.selectedIndex)) {\n      return;\n    }\n    return this.state.quotes[this.state.selectedIndex];\n  }\n\n  // Pick a index for get quotes\n  //产生index\n  setSelectedIndex() {\n    if (!this.state.quotes.length) {\n      return;\n    }\n    return random(0, this.state.quotes.length - 1)\n  }\n  //更新index\n  assignIndex() {\n    this.setState({ selectedIndex: this.setSelectedIndex() })\n  }\n\n  render() {\n    return (\n      <Grid className={this.props.classes.container + ' ' + this.props.classes.Grid} id=\"quote-box\" justify=\"center\" container>\n        \n        <Grid item xs={12} lg={6} className={this.props.classes.Grid} fixed>\n       \n           <QuoteMachine assignIndex={this.assignIndex} selectedQuote={this.selectedQuote} />\n\n        </Grid>\n      </Grid>\n    )\n  }\n\n}\n\nexport default withStyles(style)(App);\n"]},"metadata":{},"sourceType":"module"}